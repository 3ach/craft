/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "raft_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




Reply::~Reply() noexcept {
}


void Reply::__set_term(const int64_t val) {
  this->term = val;
}

void Reply::__set_voteGranted(const bool val) {
  this->voteGranted = val;
}
std::ostream& operator<<(std::ostream& out, const Reply& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Reply::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->term);
          this->__isset.term = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->voteGranted);
          this->__isset.voteGranted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Reply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Reply");

  xfer += oprot->writeFieldBegin("term", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->term);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("voteGranted", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->voteGranted);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Reply &a, Reply &b) {
  using ::std::swap;
  swap(a.term, b.term);
  swap(a.voteGranted, b.voteGranted);
  swap(a.__isset, b.__isset);
}

Reply::Reply(const Reply& other0) {
  term = other0.term;
  voteGranted = other0.voteGranted;
  __isset = other0.__isset;
}
Reply& Reply::operator=(const Reply& other1) {
  term = other1.term;
  voteGranted = other1.voteGranted;
  __isset = other1.__isset;
  return *this;
}
void Reply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Reply(";
  out << "term=" << to_string(term);
  out << ", " << "voteGranted=" << to_string(voteGranted);
  out << ")";
}


